// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



model User {
  id                         String          @id @default(uuid())
  clerkUserId                String          @unique       // clerk user id 
  email                      String          @unique
  name                       String?
  imageUrl                   String?
  industry                   String?         // Combined industry-subindustry (e.g.'tech-software-development ')
  industryInsight     IndustryInsight?       @relation(fields: [industry],references: [industry])
  createdAt                  DateTime        @default(now())
  updatedAt                  DateTime        @updatedAt
  
  
  //Profile fields 
  bio             String?                     
  experience      Int?                      // Years of experience
  skills          String[]                  //Array of skills


  assessments       Assessment[]
  resume            Resume?
  coverletter       CoverLetter[]
   

}

model Assessment{
  id                        String         @id @default(uuid())
  userId                    String  
  user                      User           @relation(fields: [userId],references:[id])
  quizScore                 Float          //overall quiz Score
  questions                 Json           //Array of {question,answer, userAnswer,isCorrect}
  category                  String         //'technical','behavioral',etc.
  improvementTip            String?        //AI generated impoverment tip 
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt

  @@index([userId])
}

model Resume{
  id                        String         @id @default(uuid())
  userId                    String         @unique
  user                      User           @relation(fields: [userId],references:[id])
  content                   String         @db.Text//'Markdown content'
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
}

model CoverLetter{
  id                        String         @id @default(uuid())
  userId                    String         
  user                      User           @relation(fields: [userId],references:[id])
  content                   String         @db.Text//'Markdown content'
  jobDescription            String?  
  companyName               String         //Name of the company appling to
  jobTitle                  String         //Position apply for
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt

  @@index([userId])
}

model IndustryInsight{
  id                          String         @id @default(uuid())
  industry                    String         @unique // the industry this data bewlongs to (e.g.; 'tech-software-development')


//User in this industry
users                 User[]

// Salary data 
salaryRanges          Json[]        // Array of {role: string, min: float , max:float , median: float, location:strings? }



//Industry trends 
growthRate            Float                  //Industry growth rate 
demandLevel           DemandLevel            //'high','Medium','low'
topSkills             String[]               //Most in demand skills



//Market Condition
marketOutlook          MarketOutlook        //"Positive","Neutral",'Negative'
keyTrends              String[]             //Array of Current industry trends 


//Learning Suggestions
recommendedSkills      String[]             //Skills Recommended for the industry 

lastUpdated            DateTime             @default(now())
nextUpdate             DateTime             //Scheduled Update time 


@@index([industry])

}

enum DemandLevel{
  HIGH
  MEDIUM
  LOW
}


enum MarketOutlook{
  POSITIVE 
  NEUTRAL 
  NEGATIVE 
}
